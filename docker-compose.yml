networks:
  microservices:
    driver: bridge

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VIRTUAL_HOST=sentemon.me,www.sentemon.me
      - LETSENCRYPT_HOST=sentemon.me,www.sentemon.me
      - LETSENCRYPT_EMAIL=sentemon.i@gmail.com
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - microservices
  
  gateway:
    container_name: gateway
    build:
      context: ./backend/src
      dockerfile: Gateway/Dockerfile
    ports:
      - 8000:8000
    environment:
      VIRTUAL_HOST: api.sentemon.me
      LETSENCRYPT_HOST: api.sentemon.me
      LETSENCRYPT_EMAIL: sentemon.gmail.com
      
      ReverseProxy__Clusters__auth-service__Destinations__destination1__Address: http://auth-service:8001
      ReverseProxy__Clusters__file-service__Destinations__destination1__Address: http://file-service:8004
      ReverseProxy__Clusters__post-service__Destinations__destination1__Address: http://post-service:8002
      ReverseProxy__Clusters__workout-service__Destinations__destination1__Address: http://workout-service:8005
      ReverseProxy__Clusters__chat-service__Destinations__destination1__Address: http://chat-service:8006
    depends_on:
      postgres:
        condition: service_healthy
      rabittmq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://gateway:8000/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices
  
  auth-service:
    container_name: auth-service
    build:
      context: ./backend/src
      dockerfile: AuthService/Dockerfile
    ports:
      - 8001:8001
    environment:
      DatabaseConnectionString: Host=postgres;Port=5432;Username=postgres;Password=mysecretpasswordfordevelopment;Database=AuthDb
      Keycloak__Url: http://keycloak:8080
      RabbitMq__Host: rabbitmq
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://auth-service:8001/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices
  
  file-service:
    container_name: file-service
    build:
      context: ./backend/src
      dockerfile: FileService/Dockerfile
    ports:
      - 8004:8004
    environment:
      ConnectionStrings__DatabaseConnectionString: Host=postgres;Port=5432;Username=postgres;Password=mysecretpasswordfordevelopment;Database=FileDb
      ConnectionStrings__AzureStorageConnectionString: AccountName=sentemon;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;DefaultEndpointsProtocol=http;BlobEndpoint=http://azurite:10000/sentemon
      RabbitMq__Host: rabbitmq
      
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://file-service:8004/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices
  
  post-service:
    container_name: post-service
    build:
      context: ./backend/src
      dockerfile: PostService/Dockerfile
    ports:
      - 8002:8002
    environment:
      DatabaseConnectionString: Host=postgres;Port=5432;Username=postgres;Password=mysecretpasswordfordevelopment;Database=PostsDb
      RabbitMq__Host: rabbitmq
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://post-service:8002/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices
  
  workout-service:
    container_name: workout-service
    build:
      context: ./backend/src
      dockerfile: WorkoutService/Dockerfile
    ports:
      - 8005:8005
    environment:
      DatabaseConnectionString: Host=postgres;Port=5432;Username=postgres;Password=mysecretpasswordfordevelopment;Database=WorkoutsDb
      RabbitMq__Host: rabbitmq
    depends_on: 
      gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://workout-service:8005/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks: 
      - microservices
        
  chat-service:
    container_name: chat-service
    build:
      context: ./backend/src
      dockerfile: ChatService/Dockerfile
    ports:
      - 8006:8006
    environment:
      DatabaseConnectionString: Host=postgres;Port=5432;Username=postgres;Password=mysecretpasswordfordevelopment;Database=ChatsDb
      RabbitMq__Host: rabbitmq
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://workout-service:8006/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices
    
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - /etc/nginx/certs
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx-certs:/etc/nginx/certs:ro
      - nginx-vhost:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
    networks:
      - microservices

  nginx-letsencrypt:
    image: nginxproxy/acme-companion
    container_name: nginx-letsencrypt
    restart: always
    environment:
      - DEFAULT_EMAIL=sentemon.i@gmail.com
    volumes_from:
      - nginx-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx-certs:/etc/nginx/certs
      - nginx-vhost:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - nginx-acme:/etc/acme.sh
    networks:
      - microservices

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpasswordfordevelopment
    ports:
      - 5432:5432
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - microservices
  
  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    container_name: keycloak
    environment:
      - KC_DB_VENDOR=h2
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HOSTNAME=localhost
    ports:
      - 8080:8080
    command: [ "start-dev", "--import-realm" ]
    restart: always
    volumes:
      - ./keycloak/fitness-app-realm.json:/opt/keycloak/data/import/fitness-app-realm.json
    networks:
      - microservices
    
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    ports:
      - 10000:10000
    command: "azurite --blobHost 0.0.0.0 --blobPort 10000"
    restart: always
    environment:
      - AZURITE_ACCOUNTS=sentemon:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
    networks:
      - microservices
  
  rabittmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices

volumes:
  postgres-data:
  nginx-certs:
  nginx-vhost:
  nginx-html:
  nginx-acme: