networks:
  microservices:
    driver: bridge

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - microservices
  
  gateway:
    container_name: gateway
    build:
      context: ./backend/src
      dockerfile: Gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      ReverseProxy__Clusters__auth-service__Destinations__destination1__Address: http://auth-service:8001
      ReverseProxy__Clusters__post-service__Destinations__destination1__Address: http://post-service:8002
    depends_on:
      postgres:
        condition: service_healthy
      rabittmq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://gateway:8000/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices
  
  auth-service:
    container_name: auth-service
    build:
      context: ./backend/src
      dockerfile: AuthService/Dockerfile
    ports:
      - "8001:8001"
    environment:
      DatabaseConnectionString: Host=postgres;Port=5432;Username=postgres;Password=mysecretpasswordfordevelopment;Database=AuthDb
      Keycloak__Url: http://keycloak:8080
      RabbitMq__Host: rabbitmq
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://auth-service:8001/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices
  
  post-service:
    container_name: post-service
    build:
      context: ./backend/src
      dockerfile: PostService/Dockerfile
    ports:
      - "8002:8002"
    environment:
      DatabaseConnectionString: Host=postgres;Port=5432;Username=postgres;Password=mysecretpasswordfordevelopment;Database=PostsDb
      RabbitMq__Host: rabbitmq
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://post-service:8002/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpasswordfordevelopment
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - microservices
  
  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    container_name: keycloak
    environment:
      - KC_DB_VENDOR=h2
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
      - KC_HOSTNAME=localhost
    ports:
      - "8080:8080"
    command: [ "start-dev" ]
    restart: always
    networks:
      - microservices
    
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    ports:
      - "10000:10000"
    command: "azurite --blobHost 0.0.0.0 --blobPort 10000"
    restart: always
    environment:
      - AZURITE_ACCOUNTS=sentemon:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
    networks:
      - microservices
  
  rabittmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices

volumes:
  postgres-data: